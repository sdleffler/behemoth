macro_rules! _matrix_mul_impl {
    ([1, 1], [1, 1] $lhs:ident, $rhs:ident) => (
        _matrix!(1, 1)([[$lhs[0][0]*$rhs[0][0]]])
    );
    ([1, 1], [1, 2] $lhs:ident, $rhs:ident) => (
        _matrix!(1, 2)([[$lhs[0][0]*$rhs[0][0], $lhs[0][0]*$rhs[0][1]]])
    );
    ([1, 1], [1, 3] $lhs:ident, $rhs:ident) => (
        _matrix!(1, 3)([[$lhs[0][0]*$rhs[0][0], $lhs[0][0]*$rhs[0][1], $lhs[0][0]*$rhs[0][2]]])
    );
    ([1, 1], [1, 4] $lhs:ident, $rhs:ident) => (
        _matrix!(1, 4)([[$lhs[0][0]*$rhs[0][0], $lhs[0][0]*$rhs[0][1],
                         $lhs[0][0]*$rhs[0][2], $lhs[0][0]*$rhs[0][3]]])
    );
    ([2, 1], [1, 1] $lhs:ident, $rhs:ident) => (
        _matrix!(2, 1)([[$lhs[0][0]*$rhs[0][0]],
                        [$lhs[1][0]*$rhs[0][0]]])
    );
    ([2, 1], [1, 2] $lhs:ident, $rhs:ident) => (
        _matrix!(2, 2)([[$lhs[0][0]*$rhs[0][0], $lhs[0][0]*$rhs[0][1]],
                        [$lhs[1][0]*$rhs[0][0], $lhs[1][0]*$rhs[0][1]]])
    );
    ([2, 1], [1, 3] $lhs:ident, $rhs:ident) => (
        _matrix!(2, 3)([[$lhs[0][0]*$rhs[0][0], $lhs[0][0]*$rhs[0][1], $lhs[0][0]*$rhs[0][2]],
                        [$lhs[1][0]*$rhs[0][0], $lhs[1][0]*$rhs[0][1], $lhs[1][0]*$rhs[0][2]]])
    );
    ([2, 1], [1, 4] $lhs:ident, $rhs:ident) => (
        _matrix!(2, 4)([[$lhs[0][0]*$rhs[0][0], $lhs[0][0]*$rhs[0][1], $lhs[0][0]*$rhs[0][2], $lhs[0][0]*$rhs[0][3]],
                        [$lhs[1][0]*$rhs[0][0], $lhs[1][0]*$rhs[0][1], $lhs[1][0]*$rhs[0][2], $lhs[1][0]*$rhs[0][3]]])
    );
    ([3, 1], [1, 1] $lhs:ident, $rhs:ident) => (
        _matrix!(3, 1)([[$lhs[0][0]*$rhs[0][0]],
                        [$lhs[1][0]*$rhs[0][0]],
                        [$lhs[2][0]*$rhs[0][0]]])
    );
    ([3, 1], [1, 2] $lhs:ident, $rhs:ident) => (
        _matrix!(3, 2)([[$lhs[0][0]*$rhs[0][0], $lhs[0][0]*$rhs[0][1]],
                        [$lhs[1][0]*$rhs[0][0], $lhs[1][0]*$rhs[0][1]],
                        [$lhs[2][0]*$rhs[0][0], $lhs[2][0]*$rhs[0][1]]])
    );
    ([3, 1], [1, 3] $lhs:ident, $rhs:ident) => (
        _matrix!(3, 3)([[$lhs[0][0]*$rhs[0][0], $lhs[0][0]*$rhs[0][1], $lhs[0][0]*$rhs[0][2]],
                        [$lhs[1][0]*$rhs[0][0], $lhs[1][0]*$rhs[0][1], $lhs[1][0]*$rhs[0][2]],
                        [$lhs[2][0]*$rhs[0][0], $lhs[2][0]*$rhs[0][1], $lhs[2][0]*$rhs[0][2]]])
    );
    ([3, 1], [1, 4] $lhs:ident, $rhs:ident) => (
        _matrix!(3, 4)([[$lhs[0][0]*$rhs[0][0], $lhs[0][0]*$rhs[0][1], $lhs[0][0]*$rhs[0][2], $lhs[0][0]*$rhs[0][3]],
                        [$lhs[1][0]*$rhs[0][0], $lhs[1][0]*$rhs[0][1], $lhs[1][0]*$rhs[0][2], $lhs[1][0]*$rhs[0][3]],
                        [$lhs[2][0]*$rhs[0][0], $lhs[2][0]*$rhs[0][1], $lhs[2][0]*$rhs[0][2], $lhs[2][0]*$rhs[0][3]]])
    );
    ([4, 1], [1, 1] $lhs:ident, $rhs:ident) => (
        _matrix!(4, 1)([[$lhs[0][0]*$rhs[0][0]],
                        [$lhs[1][0]*$rhs[0][0]],
                        [$lhs[2][0]*$rhs[0][0]],
                        [$lhs[3][0]*$rhs[0][0]]])
    );
    ([4, 1], [1, 2] $lhs:ident, $rhs:ident) => (
        _matrix!(4, 2)([[$lhs[0][0]*$rhs[0][0], $lhs[0][0]*$rhs[0][1]],
                        [$lhs[1][0]*$rhs[0][0], $lhs[1][0]*$rhs[0][1]],
                        [$lhs[2][0]*$rhs[0][0], $lhs[2][0]*$rhs[0][1]],
                        [$lhs[3][0]*$rhs[0][0], $lhs[3][0]*$rhs[0][1]]])
    );
    ([4, 1], [1, 3] $lhs:ident, $rhs:ident) => (
        _matrix!(4, 3)([[$lhs[0][0]*$rhs[0][0], $lhs[0][0]*$rhs[0][1], $lhs[0][0]*$rhs[0][2]],
                        [$lhs[1][0]*$rhs[0][0], $lhs[1][0]*$rhs[0][1], $lhs[1][0]*$rhs[0][2]],
                        [$lhs[2][0]*$rhs[0][0], $lhs[2][0]*$rhs[0][1], $lhs[2][0]*$rhs[0][2]],
                        [$lhs[3][0]*$rhs[0][0], $lhs[3][0]*$rhs[0][1], $lhs[3][0]*$rhs[0][2]]])
    );
    ([4, 1], [1, 4] $lhs:ident, $rhs:ident) => (
        _matrix!(4, 4)([[$lhs[0][0]*$rhs[0][0], $lhs[0][0]*$rhs[0][1], $lhs[0][0]*$rhs[0][2], $lhs[0][0]*$rhs[0][3]],
                        [$lhs[1][0]*$rhs[0][0], $lhs[1][0]*$rhs[0][1], $lhs[1][0]*$rhs[0][2], $lhs[1][0]*$rhs[0][3]],
                        [$lhs[2][0]*$rhs[0][0], $lhs[2][0]*$rhs[0][1], $lhs[2][0]*$rhs[0][2], $lhs[2][0]*$rhs[0][3]],
                        [$lhs[3][0]*$rhs[0][0], $lhs[3][0]*$rhs[0][1], $lhs[3][0]*$rhs[0][2], $lhs[3][0]*$rhs[0][3]]])
    );

    ([1, 2], [2, 1] $lhs:ident, $rhs:ident) => (
        _matrix!(1, 1)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0]]])
    );
    ([1, 2], [2, 2] $lhs:ident, $rhs:ident) => (
        _matrix!(1, 2)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1]]])
    );
    ([1, 2], [2, 3] $lhs:ident, $rhs:ident) => (
        _matrix!(1, 3)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2]]])
    );
    ([1, 2], [2, 4] $lhs:ident, $rhs:ident) => (
        _matrix!(1, 4)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2],
                         $lhs[0][0]*$rhs[0][3] + $lhs[0][1]*$rhs[1][3]]])
    );
    ([2, 2], [2, 1] $lhs:ident, $rhs:ident) => (
        _matrix!(2, 1)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0]]])
    );
    ([2, 2], [2, 2] $lhs:ident, $rhs:ident) => (
        _matrix!(2, 2)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1]]])
    );
    ([2, 2], [2, 3] $lhs:ident, $rhs:ident) => (
        _matrix!(2, 3)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1],
                         $lhs[1][0]*$rhs[0][2] + $lhs[1][1]*$rhs[1][2]]])
    );
    ([2, 2], [2, 4] $lhs:ident, $rhs:ident) => (
        _matrix!(2, 4)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2],
                         $lhs[0][0]*$rhs[0][3] + $lhs[0][1]*$rhs[1][3]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1],
                         $lhs[1][0]*$rhs[0][2] + $lhs[1][1]*$rhs[1][2],
                         $lhs[1][0]*$rhs[0][3] + $lhs[1][1]*$rhs[1][3]]])
    );
    ([3, 2], [2, 1] $lhs:ident, $rhs:ident) => (
        _matrix!(3, 1)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0]]])
    );
    ([3, 2], [2, 2] $lhs:ident, $rhs:ident) => (
        _matrix!(3, 2)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0],
                         $lhs[2][0]*$rhs[0][1] + $lhs[2][1]*$rhs[1][1]]])
    );
    ([3, 2], [2, 3] $lhs:ident, $rhs:ident) => (
        _matrix!(3, 3)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1],
                         $lhs[1][0]*$rhs[0][2] + $lhs[1][1]*$rhs[1][2]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0],
                         $lhs[2][0]*$rhs[0][1] + $lhs[2][1]*$rhs[1][1],
                         $lhs[2][0]*$rhs[0][2] + $lhs[2][1]*$rhs[1][2]]])
    );
    ([3, 2], [2, 4] $lhs:ident, $rhs:ident) => (
        _matrix!(3, 4)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2],
                         $lhs[0][0]*$rhs[0][3] + $lhs[0][1]*$rhs[1][3]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1],
                         $lhs[1][0]*$rhs[0][2] + $lhs[1][1]*$rhs[1][2],
                         $lhs[1][0]*$rhs[0][3] + $lhs[1][1]*$rhs[1][3]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0],
                         $lhs[2][0]*$rhs[0][1] + $lhs[2][1]*$rhs[1][1],
                         $lhs[2][0]*$rhs[0][2] + $lhs[2][1]*$rhs[1][2],
                         $lhs[2][0]*$rhs[0][3] + $lhs[2][1]*$rhs[1][3]]])
    );
    ([4, 2], [2, 1] $lhs:ident, $rhs:ident) => (
        _matrix!(4, 1)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0]],
                        [$lhs[3][0]*$rhs[0][0] + $lhs[3][1]*$rhs[1][0]]])
    );
    ([4, 2], [2, 2] $lhs:ident, $rhs:ident) => (
        _matrix!(4, 2)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0],
                         $lhs[2][0]*$rhs[0][1] + $lhs[2][1]*$rhs[1][1]],
                        [$lhs[3][0]*$rhs[0][0] + $lhs[3][1]*$rhs[1][0],
                         $lhs[3][0]*$rhs[0][1] + $lhs[3][1]*$rhs[1][1]]])
    );
    ([4, 2], [2, 3] $lhs:ident, $rhs:ident) => (
        _matrix!(4, 3)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1],
                         $lhs[1][0]*$rhs[0][2] + $lhs[1][1]*$rhs[1][2]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0],
                         $lhs[2][0]*$rhs[0][1] + $lhs[2][1]*$rhs[1][1],
                         $lhs[2][0]*$rhs[0][2] + $lhs[2][1]*$rhs[1][2]],
                        [$lhs[3][0]*$rhs[0][0] + $lhs[3][1]*$rhs[1][0],
                         $lhs[3][0]*$rhs[0][1] + $lhs[3][1]*$rhs[1][1],
                         $lhs[3][0]*$rhs[0][2] + $lhs[3][1]*$rhs[1][2]]])
    );
    ([4, 2], [2, 4] $lhs:ident, $rhs:ident) => (
        _matrix!(4, 4)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2],
                         $lhs[0][0]*$rhs[0][3] + $lhs[0][1]*$rhs[1][3]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1],
                         $lhs[1][0]*$rhs[0][2] + $lhs[1][1]*$rhs[1][2],
                         $lhs[1][0]*$rhs[0][3] + $lhs[1][1]*$rhs[1][3]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0],
                         $lhs[2][0]*$rhs[0][1] + $lhs[2][1]*$rhs[1][1],
                         $lhs[2][0]*$rhs[0][2] + $lhs[2][1]*$rhs[1][2],
                         $lhs[2][0]*$rhs[0][3] + $lhs[2][1]*$rhs[1][3]],
                        [$lhs[3][0]*$rhs[0][0] + $lhs[3][1]*$rhs[1][0],
                         $lhs[3][0]*$rhs[0][1] + $lhs[3][1]*$rhs[1][1],
                         $lhs[3][0]*$rhs[0][2] + $lhs[3][1]*$rhs[1][2],
                         $lhs[3][0]*$rhs[0][3] + $lhs[3][1]*$rhs[1][3]]])
    );

    ([1, 3], [3, 1] $lhs:ident, $rhs:ident) => (
        _matrix!(1, 1)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0]]])
    );
    ([1, 3], [3, 2] $lhs:ident, $rhs:ident) => (
        _matrix!(1, 2)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1] + $lhs[0][2]*$rhs[2][1]]])
    );
    ([1, 3], [3, 3] $lhs:ident, $rhs:ident) => (
        _matrix!(1, 3)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0]+ $lhs[0][2]*$rhs[2][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1]+ $lhs[0][2]*$rhs[2][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2]+ $lhs[0][2]*$rhs[2][2]]])
    );
    ([1, 3], [3, 4] $lhs:ident, $rhs:ident) => (
        _matrix!(1, 4)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1] + $lhs[0][2]*$rhs[2][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2] + $lhs[0][2]*$rhs[2][2],
                         $lhs[0][0]*$rhs[0][3] + $lhs[0][1]*$rhs[1][3] + $lhs[0][2]*$rhs[2][3]]])
    );
    ([2, 3], [3, 1] $lhs:ident, $rhs:ident) => (
        _matrix!(2, 1)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0] + $lhs[1][2]*$rhs[2][0]]])
    );
    ([2, 3], [3, 2] $lhs:ident, $rhs:ident) => (
        _matrix!(2, 2)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1] + $lhs[0][2]*$rhs[2][1]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0] + $lhs[1][2]*$rhs[2][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1] + $lhs[1][2]*$rhs[2][1]]])
    );
    ([2, 3], [3, 3] $lhs:ident, $rhs:ident) => (
        _matrix!(2, 3)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0]+ $lhs[0][2]*$rhs[2][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1]+ $lhs[0][2]*$rhs[2][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2]+ $lhs[0][2]*$rhs[2][2]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0]+ $lhs[1][2]*$rhs[2][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1]+ $lhs[1][2]*$rhs[2][1],
                         $lhs[1][0]*$rhs[0][2] + $lhs[1][1]*$rhs[1][2]+ $lhs[1][2]*$rhs[2][2]]])
    );
    ([2, 3], [3, 4] $lhs:ident, $rhs:ident) => (
        _matrix!(2, 4)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1] + $lhs[0][2]*$rhs[2][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2] + $lhs[0][2]*$rhs[2][2],
                         $lhs[0][0]*$rhs[0][3] + $lhs[0][1]*$rhs[1][3] + $lhs[0][2]*$rhs[2][3]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0] + $lhs[1][2]*$rhs[2][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1] + $lhs[1][2]*$rhs[2][1],
                         $lhs[1][0]*$rhs[0][2] + $lhs[1][1]*$rhs[1][2] + $lhs[1][2]*$rhs[2][2],
                         $lhs[1][0]*$rhs[0][3] + $lhs[1][1]*$rhs[1][3] + $lhs[1][2]*$rhs[2][3]]])
    );
    ([3, 3], [3, 1] $lhs:ident, $rhs:ident) => (
        _matrix!(3, 1)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0] + $lhs[1][2]*$rhs[2][0]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0] + $lhs[2][2]*$rhs[2][0]]])
    );
    ([3, 3], [3, 2] $lhs:ident, $rhs:ident) => (
        _matrix!(3, 2)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1] + $lhs[0][2]*$rhs[2][1]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0] + $lhs[1][2]*$rhs[2][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1] + $lhs[1][2]*$rhs[2][1]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0] + $lhs[2][2]*$rhs[2][0],
                         $lhs[2][0]*$rhs[0][1] + $lhs[2][1]*$rhs[1][1] + $lhs[2][2]*$rhs[2][1]]])
    );
    ([3, 3], [3, 3] $lhs:ident, $rhs:ident) => (
        _matrix!(3, 3)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1] + $lhs[0][2]*$rhs[2][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2] + $lhs[0][2]*$rhs[2][2]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0] + $lhs[1][2]*$rhs[2][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1] + $lhs[1][2]*$rhs[2][1],
                         $lhs[1][0]*$rhs[0][2] + $lhs[1][1]*$rhs[1][2] + $lhs[1][2]*$rhs[2][2]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0] + $lhs[2][2]*$rhs[2][0],
                         $lhs[2][0]*$rhs[0][1] + $lhs[2][1]*$rhs[1][1] + $lhs[2][2]*$rhs[2][1],
                         $lhs[2][0]*$rhs[0][2] + $lhs[2][1]*$rhs[1][2] + $lhs[2][2]*$rhs[2][2]]])
    );
    ([3, 3], [3, 4] $lhs:ident, $rhs:ident) => (
        _matrix!(3, 4)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1] + $lhs[0][2]*$rhs[2][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2] + $lhs[0][2]*$rhs[2][2],
                         $lhs[0][0]*$rhs[0][3] + $lhs[0][1]*$rhs[1][3] + $lhs[0][2]*$rhs[2][3]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0] + $lhs[1][2]*$rhs[2][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1] + $lhs[1][2]*$rhs[2][1],
                         $lhs[1][0]*$rhs[0][2] + $lhs[1][1]*$rhs[1][2] + $lhs[1][2]*$rhs[2][2],
                         $lhs[1][0]*$rhs[0][3] + $lhs[1][1]*$rhs[1][3] + $lhs[1][2]*$rhs[2][3]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0] + $lhs[2][2]*$rhs[2][0],
                         $lhs[2][0]*$rhs[0][1] + $lhs[2][1]*$rhs[1][1] + $lhs[2][2]*$rhs[2][1],
                         $lhs[2][0]*$rhs[0][2] + $lhs[2][1]*$rhs[1][2] + $lhs[2][2]*$rhs[2][2],
                         $lhs[2][0]*$rhs[0][3] + $lhs[2][1]*$rhs[1][3] + $lhs[2][2]*$rhs[2][3]]])
    );
    ([4, 3], [3, 1] $lhs:ident, $rhs:ident) => (
        _matrix!(4, 1)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0] + $lhs[1][2]*$rhs[2][0]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0] + $lhs[2][2]*$rhs[2][0]],
                        [$lhs[3][0]*$rhs[0][0] + $lhs[3][1]*$rhs[1][0] + $lhs[3][2]*$rhs[2][0]]])
    );
    ([4, 3], [3, 2] $lhs:ident, $rhs:ident) => (
        _matrix!(4, 2)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1] + $lhs[0][2]*$rhs[2][1]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0] + $lhs[1][2]*$rhs[2][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1] + $lhs[1][2]*$rhs[2][1]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0] + $lhs[2][2]*$rhs[2][0],
                         $lhs[2][0]*$rhs[0][1] + $lhs[2][1]*$rhs[1][1] + $lhs[2][2]*$rhs[2][1]],
                        [$lhs[3][0]*$rhs[0][0] + $lhs[3][1]*$rhs[1][0] + $lhs[3][2]*$rhs[2][0],
                         $lhs[3][0]*$rhs[0][1] + $lhs[3][1]*$rhs[1][1] + $lhs[3][2]*$rhs[2][1]]])
    );
    ([4, 3], [3, 3] $lhs:ident, $rhs:ident) => (
        _matrix!(4, 3)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1] + $lhs[0][2]*$rhs[2][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2] + $lhs[0][2]*$rhs[2][2]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0] + $lhs[1][2]*$rhs[2][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1] + $lhs[1][2]*$rhs[2][1],
                         $lhs[1][0]*$rhs[0][2] + $lhs[1][1]*$rhs[1][2] + $lhs[1][2]*$rhs[2][2]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0] + $lhs[2][2]*$rhs[2][0],
                         $lhs[2][0]*$rhs[0][1] + $lhs[2][1]*$rhs[1][1] + $lhs[2][2]*$rhs[2][1],
                         $lhs[2][0]*$rhs[0][2] + $lhs[2][1]*$rhs[1][2] + $lhs[2][2]*$rhs[2][2]],
                        [$lhs[3][0]*$rhs[0][0] + $lhs[3][1]*$rhs[1][0] + $lhs[3][2]*$rhs[2][0],
                         $lhs[3][0]*$rhs[0][1] + $lhs[3][1]*$rhs[1][1] + $lhs[3][2]*$rhs[2][1],
                         $lhs[3][0]*$rhs[0][2] + $lhs[3][1]*$rhs[1][2] + $lhs[3][2]*$rhs[2][2]]])
    );
    ([4, 3], [3, 4] $lhs:ident, $rhs:ident) => (
        _matrix!(4, 4)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1] + $lhs[0][2]*$rhs[2][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2] + $lhs[0][2]*$rhs[2][2],
                         $lhs[0][0]*$rhs[0][3] + $lhs[0][1]*$rhs[1][3] + $lhs[0][2]*$rhs[2][3]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0] + $lhs[1][2]*$rhs[2][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1] + $lhs[1][2]*$rhs[2][1],
                         $lhs[1][0]*$rhs[0][2] + $lhs[1][1]*$rhs[1][2] + $lhs[1][2]*$rhs[2][2],
                         $lhs[1][0]*$rhs[0][3] + $lhs[1][1]*$rhs[1][3] + $lhs[1][2]*$rhs[2][3]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0] + $lhs[2][2]*$rhs[2][0],
                         $lhs[2][0]*$rhs[0][1] + $lhs[2][1]*$rhs[1][1] + $lhs[2][2]*$rhs[2][1],
                         $lhs[2][0]*$rhs[0][2] + $lhs[2][1]*$rhs[1][2] + $lhs[2][2]*$rhs[2][2],
                         $lhs[2][0]*$rhs[0][3] + $lhs[2][1]*$rhs[1][3] + $lhs[2][2]*$rhs[2][3]],
                        [$lhs[3][0]*$rhs[0][0] + $lhs[3][1]*$rhs[1][0] + $lhs[3][2]*$rhs[2][0],
                         $lhs[3][0]*$rhs[0][1] + $lhs[3][1]*$rhs[1][1] + $lhs[3][2]*$rhs[2][1],
                         $lhs[3][0]*$rhs[0][2] + $lhs[3][1]*$rhs[1][2] + $lhs[3][2]*$rhs[2][2],
                         $lhs[3][0]*$rhs[0][3] + $lhs[3][1]*$rhs[1][3] + $lhs[3][2]*$rhs[2][3]]])
    );

    ([1, 4], [4, 1] $lhs:ident, $rhs:ident) => (
        _matrix!(1, 1)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0] +
                            $lhs[0][3]*$rhs[3][0]]])
    );
    ([1, 4], [4, 2] $lhs:ident, $rhs:ident) => (
        _matrix!(1, 2)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0] +
                            $lhs[0][3]*$rhs[3][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1] + $lhs[0][2]*$rhs[2][1] +
                            $lhs[0][3]*$rhs[3][1]]])
    );
    ([1, 4], [4, 3] $lhs:ident, $rhs:ident) => (
        _matrix!(1, 3)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0] +
                            $lhs[0][3]*$rhs[3][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1] + $lhs[0][2]*$rhs[2][1] +
                            $lhs[0][3]*$rhs[3][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2] + $lhs[0][2]*$rhs[2][2] +
                            $lhs[0][3]*$rhs[3][2]]])
    );
    ([1, 4], [4, 4] $lhs:ident, $rhs:ident) => (
        _matrix!(1, 4)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0] +
                            $lhs[0][3]*$rhs[3][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1] + $lhs[0][2]*$rhs[2][1] +
                            $lhs[0][3]*$rhs[3][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2] + $lhs[0][2]*$rhs[2][2] +
                            $lhs[0][3]*$rhs[3][2],
                         $lhs[0][0]*$rhs[0][3] + $lhs[0][1]*$rhs[1][3] + $lhs[0][2]*$rhs[2][3] +
                            $lhs[0][3]*$rhs[3][3]]])
    );
    ([2, 4], [4, 1] $lhs:ident, $rhs:ident) => (
        _matrix!(2, 1)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0] +
                            $lhs[0][3]*$rhs[3][0]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0] + $lhs[1][2]*$rhs[2][0] +
                            $lhs[1][3]*$rhs[3][0]]])
    );
    ([2, 4], [4, 2] $lhs:ident, $rhs:ident) => (
        _matrix!(2, 2)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0] +
                            $lhs[0][3]*$rhs[3][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1] + $lhs[0][2]*$rhs[2][1] +
                            $lhs[0][3]*$rhs[3][1]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0] + $lhs[1][2]*$rhs[2][0] +
                            $lhs[1][3]*$rhs[3][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1] + $lhs[1][2]*$rhs[2][1] +
                            $lhs[1][3]*$rhs[3][1]]])
    );
    ([2, 4], [4, 3] $lhs:ident, $rhs:ident) => (
        _matrix!(2, 3)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0] +
                            $lhs[0][3]*$rhs[3][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1] + $lhs[0][2]*$rhs[2][1] +
                            $lhs[0][3]*$rhs[3][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2] + $lhs[0][2]*$rhs[2][2] +
                            $lhs[0][3]*$rhs[3][2]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0] + $lhs[1][2]*$rhs[2][0] +
                            $lhs[1][3]*$rhs[3][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1] + $lhs[1][2]*$rhs[2][1] +
                            $lhs[1][3]*$rhs[3][1],
                         $lhs[1][0]*$rhs[0][2] + $lhs[1][1]*$rhs[1][2] + $lhs[1][2]*$rhs[2][2] +
                            $lhs[1][3]*$rhs[3][2]]])
    );
    ([2, 4], [4, 4] $lhs:ident, $rhs:ident) => (
        _matrix!(2, 4)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0] +
                            $lhs[0][3]*$rhs[3][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1] + $lhs[0][2]*$rhs[2][1] +
                            $lhs[0][3]*$rhs[3][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2] + $lhs[0][2]*$rhs[2][2] +
                            $lhs[0][3]*$rhs[3][2],
                         $lhs[0][0]*$rhs[0][3] + $lhs[0][1]*$rhs[1][3] + $lhs[0][2]*$rhs[2][3] +
                            $lhs[0][3]*$rhs[3][3]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0] + $lhs[1][2]*$rhs[2][0] +
                            $lhs[1][3]*$rhs[3][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1] + $lhs[1][2]*$rhs[2][1] +
                            $lhs[1][3]*$rhs[3][1],
                         $lhs[1][0]*$rhs[0][2] + $lhs[1][1]*$rhs[1][2] + $lhs[1][2]*$rhs[2][2] +
                            $lhs[1][3]*$rhs[3][2],
                         $lhs[1][0]*$rhs[0][3] + $lhs[1][1]*$rhs[1][3] + $lhs[1][2]*$rhs[2][3] +
                            $lhs[1][3]*$rhs[3][3]]])
    );
    ([3, 4], [4, 1] $lhs:ident, $rhs:ident) => (
        _matrix!(3, 1)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0] +
                            $lhs[0][3]*$rhs[3][0]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0] + $lhs[1][2]*$rhs[2][0] +
                            $lhs[1][3]*$rhs[3][0]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0] + $lhs[2][2]*$rhs[2][0] +
                            $lhs[2][3]*$rhs[3][0]]])
    );
    ([3, 4], [4, 2] $lhs:ident, $rhs:ident) => (
        _matrix!(3, 2)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0] +
                            $lhs[0][3]*$rhs[3][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1] + $lhs[0][2]*$rhs[2][1] +
                            $lhs[0][3]*$rhs[3][1]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0] + $lhs[1][2]*$rhs[2][0] +
                            $lhs[1][3]*$rhs[3][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1] + $lhs[1][2]*$rhs[2][1] +
                            $lhs[1][3]*$rhs[3][1]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0] + $lhs[2][2]*$rhs[2][0] +
                            $lhs[2][3]*$rhs[3][0],
                         $lhs[2][0]*$rhs[0][1] + $lhs[2][1]*$rhs[1][1] + $lhs[2][2]*$rhs[2][1] +
                            $lhs[2][3]*$rhs[3][1]]])
    );
    ([3, 4], [4, 3] $lhs:ident, $rhs:ident) => (
        _matrix!(3, 3)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0] +
                            $lhs[0][3]*$rhs[3][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1] + $lhs[0][2]*$rhs[2][1] +
                            $lhs[0][3]*$rhs[3][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2] + $lhs[0][2]*$rhs[2][2] +
                            $lhs[0][3]*$rhs[3][2]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0] + $lhs[1][2]*$rhs[2][0] +
                            $lhs[1][3]*$rhs[3][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1] + $lhs[1][2]*$rhs[2][1] +
                            $lhs[1][3]*$rhs[3][1],
                         $lhs[1][0]*$rhs[0][2] + $lhs[1][1]*$rhs[1][2] + $lhs[1][2]*$rhs[2][2] +
                            $lhs[1][3]*$rhs[3][2]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0] + $lhs[2][2]*$rhs[2][0] +
                            $lhs[2][3]*$rhs[3][0],
                         $lhs[2][0]*$rhs[0][1] + $lhs[2][1]*$rhs[1][1] + $lhs[2][2]*$rhs[2][1] +
                            $lhs[2][3]*$rhs[3][1],
                         $lhs[2][0]*$rhs[0][2] + $lhs[2][1]*$rhs[1][2] + $lhs[2][2]*$rhs[2][2] +
                            $lhs[2][3]*$rhs[3][2]]])
    );
    ([3, 4], [4, 4] $lhs:ident, $rhs:ident) => (
        _matrix!(3, 4)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0] +
                            $lhs[0][3]*$rhs[3][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1] + $lhs[0][2]*$rhs[2][1] +
                            $lhs[0][3]*$rhs[3][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2] + $lhs[0][2]*$rhs[2][2] +
                            $lhs[0][3]*$rhs[3][2],
                         $lhs[0][0]*$rhs[0][3] + $lhs[0][1]*$rhs[1][3] + $lhs[0][2]*$rhs[2][3] +
                            $lhs[0][3]*$rhs[3][3]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0] + $lhs[1][2]*$rhs[2][0] +
                            $lhs[1][3]*$rhs[3][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1] + $lhs[1][2]*$rhs[2][1] +
                            $lhs[1][3]*$rhs[3][1],
                         $lhs[1][0]*$rhs[0][2] + $lhs[1][1]*$rhs[1][2] + $lhs[1][2]*$rhs[2][2] +
                            $lhs[1][3]*$rhs[3][2],
                         $lhs[1][0]*$rhs[0][3] + $lhs[1][1]*$rhs[1][3] + $lhs[1][2]*$rhs[2][3] +
                            $lhs[1][3]*$rhs[3][3]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0] + $lhs[2][2]*$rhs[2][0] +
                            $lhs[2][3]*$rhs[3][0],
                         $lhs[2][0]*$rhs[0][1] + $lhs[2][1]*$rhs[1][1] + $lhs[2][2]*$rhs[2][1] +
                            $lhs[2][3]*$rhs[3][1],
                         $lhs[2][0]*$rhs[0][2] + $lhs[2][1]*$rhs[1][2] + $lhs[2][2]*$rhs[2][2] +
                            $lhs[2][3]*$rhs[3][2],
                         $lhs[2][0]*$rhs[0][3] + $lhs[2][1]*$rhs[1][3] + $lhs[2][2]*$rhs[2][3] +
                            $lhs[2][3]*$rhs[3][3]]])
    );
    ([4, 4], [4, 1] $lhs:ident, $rhs:ident) => (
        _matrix!(4, 1)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0] +
                            $lhs[0][3]*$rhs[3][0]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0] + $lhs[1][2]*$rhs[2][0] +
                            $lhs[1][3]*$rhs[3][0]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0] + $lhs[2][2]*$rhs[2][0] +
                            $lhs[2][3]*$rhs[3][0]],
                        [$lhs[3][0]*$rhs[0][0] + $lhs[3][1]*$rhs[1][0] + $lhs[3][2]*$rhs[2][0] +
                            $lhs[3][3]*$rhs[3][0]]])
    );
    ([4, 4], [4, 2] $lhs:ident, $rhs:ident) => (
        _matrix!(4, 2)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0] +
                            $lhs[0][3]*$rhs[3][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1] + $lhs[0][2]*$rhs[2][1] +
                            $lhs[0][3]*$rhs[3][1]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0] + $lhs[1][2]*$rhs[2][0] +
                            $lhs[1][3]*$rhs[3][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1] + $lhs[1][2]*$rhs[2][1] +
                            $lhs[1][3]*$rhs[3][1]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0] + $lhs[2][2]*$rhs[2][0] +
                            $lhs[2][3]*$rhs[3][0],
                         $lhs[2][0]*$rhs[0][1] + $lhs[2][1]*$rhs[1][1] + $lhs[2][2]*$rhs[2][1] +
                            $lhs[2][3]*$rhs[3][1]],
                        [$lhs[3][0]*$rhs[0][0] + $lhs[3][1]*$rhs[1][0] + $lhs[3][2]*$rhs[2][0] +
                            $lhs[3][3]*$rhs[3][0],
                         $lhs[3][0]*$rhs[0][1] + $lhs[3][1]*$rhs[1][1] + $lhs[3][2]*$rhs[2][1] +
                            $lhs[3][3]*$rhs[3][1]]])
    );
    ([4, 4], [4, 3] $lhs:ident, $rhs:ident) => (
        _matrix!(4, 3)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0] +
                            $lhs[0][3]*$rhs[3][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1] + $lhs[0][2]*$rhs[2][1] +
                            $lhs[0][3]*$rhs[3][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2] + $lhs[0][2]*$rhs[2][2] +
                            $lhs[0][3]*$rhs[3][2]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0] + $lhs[1][2]*$rhs[2][0] +
                            $lhs[1][3]*$rhs[3][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1] + $lhs[1][2]*$rhs[2][1] +
                            $lhs[1][3]*$rhs[3][1],
                         $lhs[1][0]*$rhs[0][2] + $lhs[1][1]*$rhs[1][2] + $lhs[1][2]*$rhs[2][2] +
                            $lhs[1][3]*$rhs[3][2]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0] + $lhs[2][2]*$rhs[2][0] +
                            $lhs[2][3]*$rhs[3][0],
                         $lhs[2][0]*$rhs[0][1] + $lhs[2][1]*$rhs[1][1] + $lhs[2][2]*$rhs[2][1] +
                            $lhs[2][3]*$rhs[3][1],
                         $lhs[2][0]*$rhs[0][2] + $lhs[2][1]*$rhs[1][2] + $lhs[2][2]*$rhs[2][2] +
                            $lhs[2][3]*$rhs[3][2]],
                        [$lhs[3][0]*$rhs[0][0] + $lhs[3][1]*$rhs[1][0] + $lhs[3][2]*$rhs[2][0] +
                            $lhs[3][3]*$rhs[3][0],
                         $lhs[3][0]*$rhs[0][1] + $lhs[3][1]*$rhs[1][1] + $lhs[3][2]*$rhs[2][1] +
                            $lhs[3][3]*$rhs[3][1],
                         $lhs[3][0]*$rhs[0][2] + $lhs[3][1]*$rhs[1][2] + $lhs[3][2]*$rhs[2][2] +
                            $lhs[3][3]*$rhs[3][2]]])
    );
    ([4, 4], [4, 4] $lhs:ident, $rhs:ident) => (
        _matrix!(4, 4)([[$lhs[0][0]*$rhs[0][0] + $lhs[0][1]*$rhs[1][0] + $lhs[0][2]*$rhs[2][0] +
                            $lhs[0][3]*$rhs[3][0],
                         $lhs[0][0]*$rhs[0][1] + $lhs[0][1]*$rhs[1][1] + $lhs[0][2]*$rhs[2][1] +
                            $lhs[0][3]*$rhs[3][1],
                         $lhs[0][0]*$rhs[0][2] + $lhs[0][1]*$rhs[1][2] + $lhs[0][2]*$rhs[2][2] +
                            $lhs[0][3]*$rhs[3][2],
                         $lhs[0][0]*$rhs[0][3] + $lhs[0][1]*$rhs[1][3] + $lhs[0][2]*$rhs[2][3] +
                            $lhs[0][3]*$rhs[3][3]],
                        [$lhs[1][0]*$rhs[0][0] + $lhs[1][1]*$rhs[1][0] + $lhs[1][2]*$rhs[2][0] +
                            $lhs[1][3]*$rhs[3][0],
                         $lhs[1][0]*$rhs[0][1] + $lhs[1][1]*$rhs[1][1] + $lhs[1][2]*$rhs[2][1] +
                            $lhs[1][3]*$rhs[3][1],
                         $lhs[1][0]*$rhs[0][2] + $lhs[1][1]*$rhs[1][2] + $lhs[1][2]*$rhs[2][2] +
                            $lhs[1][3]*$rhs[3][2],
                         $lhs[1][0]*$rhs[0][3] + $lhs[1][1]*$rhs[1][3] + $lhs[1][2]*$rhs[2][3] +
                            $lhs[1][3]*$rhs[3][3]],
                        [$lhs[2][0]*$rhs[0][0] + $lhs[2][1]*$rhs[1][0] + $lhs[2][2]*$rhs[2][0] +
                            $lhs[2][3]*$rhs[3][0],
                         $lhs[2][0]*$rhs[0][1] + $lhs[2][1]*$rhs[1][1] + $lhs[2][2]*$rhs[2][1] +
                            $lhs[2][3]*$rhs[3][1],
                         $lhs[2][0]*$rhs[0][2] + $lhs[2][1]*$rhs[1][2] + $lhs[2][2]*$rhs[2][2] +
                            $lhs[2][3]*$rhs[3][2],
                         $lhs[2][0]*$rhs[0][3] + $lhs[2][1]*$rhs[1][3] + $lhs[2][2]*$rhs[2][3] +
                            $lhs[2][3]*$rhs[3][3]],
                        [$lhs[3][0]*$rhs[0][0] + $lhs[3][1]*$rhs[1][0] + $lhs[3][2]*$rhs[2][0] +
                            $lhs[3][3]*$rhs[3][0],
                         $lhs[3][0]*$rhs[0][1] + $lhs[3][1]*$rhs[1][1] + $lhs[3][2]*$rhs[2][1] +
                            $lhs[3][3]*$rhs[3][1],
                         $lhs[3][0]*$rhs[0][2] + $lhs[3][1]*$rhs[1][2] + $lhs[3][2]*$rhs[2][2] +
                            $lhs[3][3]*$rhs[3][2],
                         $lhs[3][0]*$rhs[0][3] + $lhs[3][1]*$rhs[1][3] + $lhs[3][2]*$rhs[2][3] +
                            $lhs[3][3]*$rhs[3][3]]])
    );

    ([$lrows:tt, $lcols:tt], [$rrows:tt, $rcols:tt] $lhs:ident, $rhs:ident) => (
        {
            let mut out = <_matrix!($lrows, $rcols) as $crate::Zero>::ZERO;

            for (i, row) in out.iter_mut().enumerate() {
                for (j, elem) in row.iter_mut().enumerate() {
                    for (l_ik, r_kj) in $lhs[i].iter()
                                               .zip($rhs.iter().map(|&row| row[j])) {
                        *elem += l_ik * r_kj;
                    }
                }
            }

            out
        }
    );
}

macro_rules! _matrices_auto_mul_impls {
    (@outer [$($lty:ty => $lrows:tt $lcols:tt)*]
        [$cty:ty => $crows:tt $ccols:tt $($rty:ty => $rrows:tt $rcols:tt)*]) => (
        _matrices_auto_mul_impls! {
            @inner
            ($cty => $crows $ccols)
            []
            [$($lty => $lrows $lcols)* $cty => $crows $ccols $($rty => $rrows $rcols)*]
        }
        _matrices_auto_mul_impls! {
            @outer
            [$($lty => $lrows $lcols)* $cty => $crows $ccols]
            [$($rty => $rrows $rcols)*]
        }
    );
    (@outer $ignore:tt []) => ();
    (@inner ($bty:ty => $brows:tt $bcols:tt)
        [$($done:tt)*]
        [$cty:ty => $crows:tt $ccols:tt $($rest:tt)*]) => (
        is_eq! {
            if ($crows) == ($bcols) {
                impl Mul<$cty> for $bty {
                    type Output = _matrix!($brows, $ccols);

                    #[inline]
                    #[cfg(not(feature = "no_special_cases"))]
                    fn mul(self, rhs: $cty) -> _matrix!($brows, $ccols) {
                        _matrix_mul_impl!([$brows, $bcols], [$crows, $ccols] self, rhs)
                    }

                    #[inline]
                    #[cfg(feature = "no_special_cases")]
                    fn mul(self, rhs: $cty) -> _matrix!($brows, $ccols) {
                        let mut out = <_matrix!($brows, $ccols) as $crate::Zero>::ZERO;

                        for (i, row) in out.iter_mut().enumerate() {
                            for (j, elem) in row.iter_mut().enumerate() {
                                for (l_ik, r_kj) in self[i].iter()
                                                           .zip(rhs.iter().map(|&row| row[j])) {
                                    *elem += l_ik * r_kj;
                                }
                            }
                        }

                        out
                    }
                }
            } else {}
        }
        _matrices_auto_mul_impls! {
            @inner
            ($bty => $brows $bcols)
            [$($done)* $cty => $crows $ccols]
            [$($rest)*]
        }
    );
    (@inner $ignore:tt $empty:tt []) => ();

    ($($bty:ty => $brows:tt $bcols:tt)+) => (
        _matrices_auto_mul_impls! {
            @outer
            []
            [$($bty => $brows $bcols)+]
        }
    );
}

macro_rules! _matrix_det_impl {
    (1, $s:ident, $scalar:ty) => (
        $s[0][0]
    );
    (2, $s:ident, $scalar:ty) => (
        $s[0][0] * $s[1][1] - $s[0][1] * $s[1][0]
    );
    (3, $s:ident, $scalar:ty) => (
        $s[0][0]*$s[1][1]*$s[2][2] + $s[0][1]*$s[1][2]*$s[2][0] + $s[0][2]*$s[1][0]*$s[2][1] -
        $s[0][2]*$s[1][1]*$s[2][0] - $s[0][1]*$s[1][0]*$s[2][2] - $s[0][0]*$s[1][2]*$s[2][1]
    );
    ($order:tt, $s:ident, $scalar:ty) => (
        {
            fn det(data: &Vec<Vec<$scalar>>) -> $scalar {
                if data.len() == 2 {
                    data[0][0] * data[1][1] - data[0][1] * data[1][0]
                } else {
                    let (top, body) = data.split_first().unwrap();
                    let mut minor: Vec<Vec<$scalar>>
                        = body.iter().map(|row| row[1..].to_vec()).collect();
                    let mut sum = top[0] * det(&minor);
                    for i in 1..top.len() {
                        for j in 0..body.len() {
                            minor[j][i-1] = body[j][i-1];
                        }
                        sum += top[i] * det(&minor) * (-((i as isize) & 1) | 1) as f64;
                    }
                    sum
                }
            }
            det(&$s.iter().map(|row| row.to_vec()).collect())
        }
    );
}

macro_rules! _matrix_id_impl {
    (1, $matrix:ident, $scalar:ty) => (
        $matrix([[<$scalar as $crate::One>::ONE]])
    );
    (2, $matrix:ident, $scalar:ty) => (
        $matrix([[<$scalar as $crate::One>::ONE, <$scalar as $crate::Zero>::ZERO],
                 [<$scalar as $crate::Zero>::ZERO, <$scalar as $crate::One>::ONE]])
    );
    (3, $matrix:ident, $scalar:ty) => (
        $matrix([[<$scalar as $crate::One>::ONE,
                  <$scalar as $crate::Zero>::ZERO,
                  <$scalar as $crate::Zero>::ZERO],
                 [<$scalar as $crate::Zero>::ZERO,
                  <$scalar as $crate::One>::ONE,
                  <$scalar as $crate::Zero>::ZERO],
                 [<$scalar as $crate::Zero>::ZERO,
                  <$scalar as $crate::Zero>::ZERO,
                  <$scalar as $crate::One>::ONE]])
    );
    (4, $matrix:ident, $scalar:ty) => (
        $matrix([[<$scalar as $crate::One>::ONE,
                  <$scalar as $crate::Zero>::ZERO,
                  <$scalar as $crate::Zero>::ZERO,
                  <$scalar as $crate::Zero>::ZERO],
                 [<$scalar as $crate::Zero>::ZERO,
                  <$scalar as $crate::One>::ONE,
                  <$scalar as $crate::Zero>::ZERO,
                  <$scalar as $crate::Zero>::ZERO],
                 [<$scalar as $crate::Zero>::ZERO,
                  <$scalar as $crate::Zero>::ZERO,
                  <$scalar as $crate::One>::ONE,
                  <$scalar as $crate::Zero>::ZERO],
                 [<$scalar as $crate::Zero>::ZERO,
                  <$scalar as $crate::Zero>::ZERO,
                  <$scalar as $crate::Zero>::ZERO,
                  <$scalar as $crate::One>::ONE]])
    );
    ($order:tt, $matrix:ident, $scalar:ty) => (
        {
            let mut id = <$matrix as $crate::Zero>::ZERO;
            for i in 0..$matrix::ROWS {
                id[i][i] = <$scalar as $crate::One>::ONE;
            }
            id
        }
    );
}

macro_rules! _matrix_transpose_impl {
    (1, 1, $s:ident) => (
        _matrix!(1, 1)([[$s[0][0]]])
    );
    (1, 2, $s:ident) => (
        _matrix!(2, 1)([[$s[0][0]],
                        [$s[0][1]]])
    );
    (1, 3, $s:ident) => (
        _matrix!(3, 1)([[$s[0][0]],
                        [$s[0][1]],
                        [$s[0][2]]])
    );
    (1, 4, $s:ident) => (
        _matrix!(4, 1)([[$s[0][0]],
                        [$s[0][1]],
                        [$s[0][2]],
                        [$s[0][3]]])
    );
    (2, 1, $s:ident) => (
        _matrix!(1, 2)([[$s[0][0], $s[1][0]]])
    );
    (2, 2, $s:ident) => (
        _matrix!(2, 2)(
            [[$s[0][0], $s[1][0]],
             [$s[0][1], $s[1][1]]]
        )
    );
    (2, 3, $s:ident) => (
        _matrix!(3, 2)(
            [[$s[0][0], $s[1][0]],
             [$s[0][1], $s[1][1]],
             [$s[0][2], $s[1][2]]]
        )
    );
    (2, 4, $s:ident) => (
        _matrix!(4, 2)(
            [[$s[0][0], $s[1][0]],
             [$s[0][1], $s[1][1]],
             [$s[0][2], $s[1][2]],
             [$s[0][3], $s[1][3]]]
        )
    );
    (3, 1, $s:ident) => (
        _matrix!(1, 3)(
            [[$s[0][0], $s[1][0], $s[2][0]]]
        )
    );
    (3, 2, $s:ident) => (
        _matrix!(2, 3)(
            [[$s[0][0], $s[1][0], $s[2][0]],
             [$s[0][1], $s[1][1], $s[2][1]]]
        )
    );
    (3, 3, $s:ident) => (
        _matrix!(3, 3)(
            [[$s[0][0], $s[1][0], $s[2][0]],
             [$s[0][1], $s[1][1], $s[2][1]],
             [$s[0][2], $s[1][2], $s[2][2]]]
        )
    );
    (3, 4, $s:ident) => (
        _matrix!(4, 3)(
            [[$s[0][0], $s[1][0], $s[2][0]],
             [$s[0][1], $s[1][1], $s[2][1]],
             [$s[0][2], $s[1][2], $s[2][2]],
             [$s[0][3], $s[1][3], $s[2][3]]]
        )
    );
    (4, 1, $s:ident) => (
        _matrix!(1, 4)(
            [[$s[0][0], $s[1][0], $s[2][0], $s[3][0]]]
        )
    );
    (4, 2, $s:ident) => (
        _matrix!(2, 4)(
            [[$s[0][0], $s[1][0], $s[2][0], $s[3][0]],
             [$s[0][1], $s[1][1], $s[2][1], $s[3][1]]]
        )
    );
    (4, 3, $s:ident) => (
        _matrix!(3, 4)(
            [[$s[0][0], $s[1][0], $s[2][0], $s[3][0]],
             [$s[0][1], $s[1][1], $s[2][1], $s[3][1]],
             [$s[0][2], $s[1][2], $s[2][2], $s[3][2]]]
        )
    );
    (4, 4, $s:ident) => (
        _matrix!(4, 4)(
            [[$s[0][0], $s[1][0], $s[2][0], $s[3][0]],
             [$s[0][1], $s[1][1], $s[2][1], $s[3][1]],
             [$s[0][2], $s[1][2], $s[2][2], $s[3][2]],
             [$s[0][3], $s[1][3], $s[2][3], $s[3][3]]]
        )
    );
    ($rows:tt, $cols:tt, $s:ident) => (
        {
            let mut out = <_matrix!($cols, $rows) as $crate::Zero>::ZERO;
            for (i, row) in $s.iter().enumerate() {
                for (j, &elem) in row.iter().enumerate() {
                    out[j][i] = elem;
                }
            }
            out
        }
    );
}

#[macro_export]
macro_rules! matrices {
    ($scalar:ty: $($tyname:ident => $rows:tt, $cols:tt)+) => (
        #[allow(unused_imports)]
        use $crate::traits::{Matrix, Square};

        #[allow(unused_imports)]
        use std::ops::{
            Add, AddAssign,
            Sub, SubAssign,
            Mul, MulAssign,
            Div, DivAssign,
            Neg,
            Deref, DerefMut
        };

        macro_rules! _matrix {
            $(
                ($rows, $cols) => ($tyname);
            )+
        }

        _matrices_auto_mul_impls!($($tyname => $rows $cols)+);

        $(
            as_items! {
                #[derive(Clone, Copy, Debug, PartialEq)]
                pub struct $tyname ([[$scalar; $cols]; $rows]);

                impl $tyname {
                    const ROWS: usize = $rows;
                    const COLS: usize = $cols;
                }

                impl $crate::traits::Matrix for $tyname {
                    type Scalar = $scalar;
                    type Transpose = _matrix!($cols, $rows);

                    #[inline]
                    fn dimensions(&self) -> (usize, usize) { (Self::ROWS, Self::COLS) }

                    #[inline]
                    #[cfg(not(feature = "no_special_cases"))]
                    fn transpose(&self) -> Self::Transpose {
                        _matrix_transpose_impl!($rows, $cols, self)
                    }

                    #[inline]
                    #[cfg(feature = "no_special_cases")]
                    fn transpose(&self) -> Self::Transpose {
                        let mut out = <Self::Transpose as $crate::Zero>::ZERO;
                        for (i, row) in self.iter().enumerate() {
                            for (j, &elem) in row.iter().enumerate() {
                                out[j][i] = elem;
                            }
                        }
                        out
                    }
                }

                impl Deref for $tyname {
                    type Target = [[$scalar; $cols]; $rows];

                    fn deref(&self) -> &[[$scalar; $cols]; $rows] { &self.0 }
                }

                impl DerefMut for $tyname {
                    fn deref_mut(&mut self) -> &mut [[$scalar; $cols]; $rows] { &mut self.0 }
                }

                // FIXME: Special case for matrices nxm with n <= 4, m <= 4
                impl Add for $tyname {
                    type Output = Self;

                    #[inline]
                    fn add(self, rhs: $tyname) -> $tyname {
                        let mut out = self;
                        for (i, row) in rhs.iter().enumerate() {
                            for (j, &elem) in row.iter().enumerate() {
                                out[i][j] += elem;
                            }
                        }
                        out
                    }
                }

                // FIXME: Special case for matrices nxm with n <= 4, m <= 4
                impl AddAssign for $tyname {
                    #[inline]
                    fn add_assign(&mut self, rhs: $tyname) {
                        for (i, row) in rhs.iter().enumerate() {
                            for (j, &elem) in row.iter().enumerate() {
                                self[i][j] += elem;
                            }
                        }
                    }
                }

                // FIXME: Special case for matrices nxm with n <= 4, m <= 4
                impl Sub for $tyname {
                    type Output = Self;

                    #[inline]
                    fn sub(self, rhs: $tyname) -> $tyname {
                        let mut out = self;
                        for (i, row) in rhs.iter().enumerate() {
                            for (j, &elem) in row.iter().enumerate() {
                                out[i][j] -= elem;
                            }
                        }
                        out
                    }
                }

                // FIXME: Special case for matrices nxm with n <= 4, m <= 4
                impl SubAssign for $tyname {
                    #[inline]
                    fn sub_assign(&mut self, rhs: $tyname) {
                        for (i, row) in rhs.iter().enumerate() {
                            for (j, &elem) in row.iter().enumerate() {
                                self[i][j] -= elem;
                            }
                        }
                    }
                }

                // FIXME: Special case for matrices nxm with n <= 4, m <= 4
                impl Mul<$scalar> for $tyname {
                    type Output = Self;

                    #[inline]
                    fn mul(self, rhs: $scalar) -> $tyname {
                        let mut out = self;
                        for row in out.iter_mut() {
                            for elem in row.iter_mut() {
                                *elem *= rhs;
                            }
                        }
                        out
                    }
                }

                // FIXME: Special case for matrices nxm with n <= 4, m <= 4
                impl Mul<$tyname> for $scalar {
                    type Output = $tyname;

                    #[inline]
                    fn mul(self, rhs: $tyname) -> $tyname {
                        let mut out = rhs;
                        for row in out.iter_mut() {
                            for elem in row.iter_mut() {
                                *elem *= self;
                            }
                        }
                        out
                    }
                }

                // FIXME: Special case for matrices nxm with n <= 4, m <= 4
                impl MulAssign<$scalar> for $tyname {
                    #[inline]
                    fn mul_assign(&mut self, rhs: $scalar) {
                        for row in self.iter_mut() {
                            for elem in row.iter_mut() {
                                *elem *= rhs;
                            }
                        }
                    }
                }

                // FIXME: Special case for matrices nxm with n <= 4, m <= 4
                impl Div<$scalar> for $tyname {
                    type Output = Self;

                    #[inline]
                    fn div(self, rhs: $scalar) -> $tyname {
                        let mut out = self;
                        for row in out.iter_mut() {
                            for elem in row.iter_mut() {
                                *elem /= rhs;
                            }
                        }
                        out
                    }
                }

                // FIXME: Special case for matrices nxm with n <= 4, m <= 4
                impl DivAssign<$scalar> for $tyname {
                    #[inline]
                    fn div_assign(&mut self, rhs: $scalar) {
                        for row in self.iter_mut() {
                            for elem in row.iter_mut() {
                                *elem /= rhs;
                            }
                        }
                    }
                }

                // FIXME: Special case for matrices nxm with n <= 4, m <= 4
                impl Neg for $tyname {
                    type Output = Self;

                    #[inline]
                    fn neg(self) -> $tyname {
                        let mut out = self;
                        for row in out.iter_mut() {
                            for elem in row.iter_mut() {
                                *elem = -(*elem);
                            }
                        }
                        out
                    }
                }

                impl $crate::Zero for $tyname {
                    const ZERO: $tyname = $tyname(
                        [[<$scalar as $crate::Zero>::ZERO; $cols]; $rows]
                    );
                }
            }

            is_eq! {
                if ($rows) == ($cols) {
                    impl $crate::traits::Square for $tyname {
                        #[inline]
                        #[cfg(not(feature = "no_special_cases"))]
                        fn identity() -> $tyname {
                            _matrix_id_impl!($rows, $tyname, $scalar)
                        }

                        #[inline]
                        #[cfg(feature = "no_special_cases")]
                        fn identity() -> $tyname {
                            let mut id = <$tyname as $crate::Zero>::ZERO;
                            for i in 0..$tyname::ROWS {
                                id[i][i] = <$scalar as $crate::One>::ONE;
                            }
                            id
                        }

                        #[inline]
                        #[cfg(not(feature = "no_special_cases"))]
                        fn determinant(&self) -> $scalar {
                            _matrix_det_impl!($rows, self, $scalar)
                        }

                        #[inline]
                        #[cfg(feature = "no_special_cases")]
                        fn determinant(&self) -> $scalar {
                            fn det(data: &Vec<Vec<$scalar>>) -> $scalar {
                                if data.len() == 2 {
                                    data[0][0] * data[1][1] - data[0][1] * data[1][0]
                                } else {
                                    let (top, body) = data.split_first().unwrap();
                                    let mut minor: Vec<Vec<$scalar>>
                                        = body.iter().map(|row| row[1..].to_vec()).collect();
                                    let mut sum = top[0] * det(&minor);
                                    for i in 1..top.len() {
                                        for j in 0..body.len() {
                                            minor[j][i-1] = body[j][i-1];
                                        }
                                        sum += top[i] * det(&minor) * (-((i as isize) & 1) | 1) as f64;
                                    }
                                    sum
                                }
                            }
                            det(&self.iter().map(|row| row.to_vec()).collect())
                        }

                        #[inline]
                        fn transpose_mut(&mut self) {
                            *self = self.transpose();
                        }
                    }

                    impl MulAssign for $tyname {
                        #[inline]
                        fn mul_assign(&mut self, rhs: $tyname) {
                            *self = *self * rhs;
                        }
                    }
                } else {}
            }
        )+
    );
}
